#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    May 08, 2021 10:58:38 AM PDT  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import CotaDTU_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = CotaDTU_Top (root)
    CotaDTU_support.init(root, top)
    root.mainloop()

w = None
def create_CotaDTU_Top(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_CotaDTU_Top(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = CotaDTU_Top (w)
    CotaDTU_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_CotaDTU_Top():
    global w
    w.destroy()
    w = None

class CotaDTU_Top:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1275x620")
        top.minsize(1275, 640)
        top.maxsize(1275, 640)
        top.resizable(1,  1)
        top.title("CotaDTU")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.CotaNotebook = ttk.Notebook(top)
        self.CotaNotebook.place(relx=0.0, rely=0.065, relheight=0.977
                , relwidth=1.0)
        self.CotaNotebook.configure(takefocus="")
        self.CotaNotebookDemo = tk.Frame(self.CotaNotebook)
        self.CotaNotebook.add(self.CotaNotebookDemo, padding=3)
        self.CotaNotebook.tab(0, text="Demo",compound="left",underline="-1",)
        self.CotaNotebookDemo.configure(background="#d9d9d9")
        self.CotaNotebookDemo.configure(highlightbackground="#d9d9d9")
        self.CotaNotebookDemo.configure(highlightcolor="black")
        self.CotaNotebookLPM = tk.Frame(self.CotaNotebook)
        self.CotaNotebook.add(self.CotaNotebookLPM, padding=3)
        self.CotaNotebook.tab(1, text="ESL",compound="none",underline="-1",)
        self.CotaNotebookLPM.configure(background="#d9d9d9")
        self.CotaNotebookLPM.configure(highlightbackground="#d9d9d9")
        self.CotaNotebookLPM.configure(highlightcolor="black")
        self.CotaNotebookDebug = tk.Frame(self.CotaNotebook)
        self.CotaNotebook.add(self.CotaNotebookDebug, padding=3)
        self.CotaNotebook.tab(2, text="Debug",compound="none",underline="-1",)
        self.CotaNotebookDebug.configure(background="#d9d9d9")
        self.CotaNotebookDebug.configure(highlightbackground="#d9d9d9")
        self.CotaNotebookDebug.configure(highlightcolor="black")

        self.style.configure('Treeview',  font="TkDefaultFont")
        self.clientListTree = ScrolledTreeView(self.CotaNotebookDemo)
        self.clientListTree.place(relx=0.008, rely=0.069, relheight=0.288
                , relwidth=0.378)
        self.clientListTree.configure(columns="Col1 Col2")
        # build_treeview_support starting.
        self.clientListTree.heading("#0",text="Receiver ID")
        self.clientListTree.heading("#0",anchor="center")
        self.clientListTree.column("#0",width="150")
        self.clientListTree.column("#0",minwidth="20")
        self.clientListTree.column("#0",stretch="0")
        self.clientListTree.column("#0",anchor="center")
        self.clientListTree.heading("Col1",text="Link Quality")
        self.clientListTree.heading("Col1",anchor="center")
        self.clientListTree.column("Col1",width="100")
        self.clientListTree.column("Col1",minwidth="20")
        self.clientListTree.column("Col1",stretch="0")
        self.clientListTree.column("Col1",anchor="center")
        self.clientListTree.heading("Col2",text="Status")
        self.clientListTree.heading("Col2",anchor="center")
        self.clientListTree.column("Col2",width="211")
        self.clientListTree.column("Col2",minwidth="20")
        self.clientListTree.column("Col2",stretch="1")
        self.clientListTree.column("Col2",anchor="center")
        self.clientListTree.bind('<<TreeviewSelect>>',lambda e:CotaDTU_support.select_rx(e))
        self.clientListTree.bind('<Control-Key-c>',lambda e:CotaDTU_support.copy_id(e))

        self.clientDetailTree = ScrolledTreeView(self.CotaNotebookDemo)
        self.clientDetailTree.place(relx=0.008, rely=0.466, relheight=0.46
                , relwidth=0.378)
        self.clientDetailTree.configure(columns="Col1")
        # build_treeview_support starting.
        self.clientDetailTree.heading("#0",text="Parameter")
        self.clientDetailTree.heading("#0",anchor="center")
        self.clientDetailTree.column("#0",width="230")
        self.clientDetailTree.column("#0",minwidth="20")
        self.clientDetailTree.column("#0",stretch="0")
        self.clientDetailTree.column("#0",anchor="w")
        self.clientDetailTree.heading("Col1",text="Value")
        self.clientDetailTree.heading("Col1",anchor="center")
        self.clientDetailTree.column("Col1",width="231")
        self.clientDetailTree.column("Col1",minwidth="20")
        self.clientDetailTree.column("Col1",stretch="1")
        self.clientDetailTree.column("Col1",anchor="w")

        self.sysinfoTree = ScrolledTreeView(self.CotaNotebookDemo)
        self.sysinfoTree.place(relx=0.401, rely=0.466, relheight=0.46
                , relwidth=0.278)
        self.sysinfoTree.configure(columns="Col1")
        # build_treeview_support starting.
        self.sysinfoTree.heading("#0",text="Parameter")
        self.sysinfoTree.heading("#0",anchor="center")
        self.sysinfoTree.column("#0",width="167")
        self.sysinfoTree.column("#0",minwidth="20")
        self.sysinfoTree.column("#0",stretch="1")
        self.sysinfoTree.column("#0",anchor="w")
        self.sysinfoTree.heading("Col1",text="Value")
        self.sysinfoTree.heading("Col1",anchor="center")
        self.sysinfoTree.column("Col1",width="167")
        self.sysinfoTree.column("Col1",minwidth="20")
        self.sysinfoTree.column("Col1",stretch="1")
        self.sysinfoTree.column("Col1",anchor="w")

        self.clientCmdFrame = ttk.Frame(self.CotaNotebookDemo)
        self.clientCmdFrame.place(relx=0.401, rely=0.069, relheight=0.284
                , relwidth=0.275)
        self.clientCmdFrame.configure(relief='groove')
        self.clientCmdFrame.configure(borderwidth="2")
        self.clientCmdFrame.configure(relief="groove")

        self.regBtn = ttk.Button(self.clientCmdFrame)
        self.regBtn.place(relx=0.057, rely=0.121, height=25, width=136)
        self.regBtn.configure(takefocus="")
        self.regBtn.configure(text='''Register''')
        self.regBtn.bind('<ButtonRelease-1>',lambda e:CotaDTU_support.demo_rx_btn(e))

        self.startChgBtn = ttk.Button(self.clientCmdFrame)
        self.startChgBtn.place(relx=0.057, rely=0.303, height=25, width=136)
        self.startChgBtn.configure(takefocus="")
        self.startChgBtn.configure(text='''Start Charge''')
        self.startChgBtn.bind('<ButtonRelease-1>',lambda e:CotaDTU_support.demo_rx_btn(e))

        self.unRegBtn = ttk.Button(self.clientCmdFrame)
        self.unRegBtn.place(relx=0.514, rely=0.121, height=25, width=136)
        self.unRegBtn.configure(takefocus="")
        self.unRegBtn.configure(text='''Unregister''')
        self.unRegBtn.bind('<ButtonRelease-1>',lambda e:CotaDTU_support.demo_rx_btn(e))

        self.stopChgBtn = ttk.Button(self.clientCmdFrame)
        self.stopChgBtn.place(relx=0.514, rely=0.303, height=25, width=136)
        self.stopChgBtn.configure(takefocus="")
        self.stopChgBtn.configure(text='''Stop Charge''')
        self.stopChgBtn.bind('<ButtonRelease-1>',lambda e:CotaDTU_support.demo_rx_btn(e))

        self.sleepCltBtn = ttk.Button(self.clientCmdFrame)
        self.sleepCltBtn.place(relx=0.514, rely=0.485, height=25, width=136)
        self.sleepCltBtn.configure(takefocus="")
        self.sleepCltBtn.configure(text='''Sleep''')
        self.sleepCltBtn.bind('<ButtonRelease-1>',lambda e:CotaDTU_support.demo_rx_btn(e))

        self.identClientBtn = ttk.Button(self.clientCmdFrame)
        self.identClientBtn.place(relx=0.057, rely=0.485, height=25, width=136)
        self.identClientBtn.configure(takefocus="")
        self.identClientBtn.configure(text='''Identify''')
        self.identClientBtn.bind('<ButtonRelease-1>',lambda e:CotaDTU_support.demo_rx_btn(e))

        self.clientListLbl = ttk.Label(self.CotaNotebookDemo)
        self.clientListLbl.place(relx=0.008, rely=0.033, height=19, width=100)
        self.clientListLbl.configure(background="#d9d9d9")
        self.clientListLbl.configure(foreground="#000000")
        self.clientListLbl.configure(font="TkDefaultFont")
        self.clientListLbl.configure(relief="flat")
        self.clientListLbl.configure(text='''Receiver List''')

        self.clientDetailLbl = ttk.Label(self.CotaNotebookDemo)
        self.clientDetailLbl.place(relx=0.008, rely=0.426, height=19, width=85)
        self.clientDetailLbl.configure(background="#d9d9d9")
        self.clientDetailLbl.configure(foreground="#000000")
        self.clientDetailLbl.configure(font="TkDefaultFont")
        self.clientDetailLbl.configure(relief="flat")
        self.clientDetailLbl.configure(text='''Receiver Details''')

        self.sysinfoLbl = ttk.Label(self.CotaNotebookDemo)
        self.sysinfoLbl.place(relx=0.401, rely=0.431, height=19, width=85)
        self.sysinfoLbl.configure(background="#d9d9d9")
        self.sysinfoLbl.configure(foreground="#000000")
        self.sysinfoLbl.configure(font="TkDefaultFont")
        self.sysinfoLbl.configure(relief="flat")
        self.sysinfoLbl.configure(text='''System Info''')

        self.clientCmdLbl = ttk.Label(self.CotaNotebookDemo)
        self.clientCmdLbl.place(relx=0.401, rely=0.034, height=19, width=170)
        self.clientCmdLbl.configure(background="#d9d9d9")
        self.clientCmdLbl.configure(foreground="#000000")
        self.clientCmdLbl.configure(font="TkDefaultFont")
        self.clientCmdLbl.configure(relief="flat")
        self.clientCmdLbl.configure(text='''Receiver Commands''')

        self.ossiaLogoBtn = tk.Button(self.CotaNotebookDemo)
        self.ossiaLogoBtn.place(relx=0.708, rely=0.069, height=164, width=367)
        self.ossiaLogoBtn.configure(activebackground="#ececec")
        self.ossiaLogoBtn.configure(activeforeground="#000000")
        self.ossiaLogoBtn.configure(background="#d9d9d9")
        self.ossiaLogoBtn.configure(borderwidth="0")
        self.ossiaLogoBtn.configure(disabledforeground="#a3a3a3")
        self.ossiaLogoBtn.configure(foreground="#000000")
        self.ossiaLogoBtn.configure(highlightbackground="#d9d9d9")
        self.ossiaLogoBtn.configure(highlightcolor="black")
        self.ossiaLogoBtn.configure(pady="0")
        self.ossiaLogoBtn.configure(relief="sunken")

        self.txCmdFrame = ttk.Frame(self.CotaNotebookDemo)
        self.txCmdFrame.place(relx=0.7, rely=0.466, relheight=0.457
                , relwidth=0.138)
        self.txCmdFrame.configure(relief='groove')
        self.txCmdFrame.configure(borderwidth="2")
        self.txCmdFrame.configure(relief="groove")

        self.sendDiscBtn = ttk.Button(self.txCmdFrame)
        self.sendDiscBtn.place(relx=0.114, rely=0.264, height=25, width=136)
        self.sendDiscBtn.configure(takefocus="")
        self.sendDiscBtn.configure(text='''Send Discovery''')
        self.sendDiscBtn.bind('<ButtonRelease-1>',lambda e:CotaDTU_support.sys_btn_cmd(e))

        self.identifyBtn = ttk.Button(self.txCmdFrame)
        self.identifyBtn.place(relx=0.114, rely=0.038, height=25, width=136)
        self.identifyBtn.configure(takefocus="")
        self.identifyBtn.configure(text='''Identify Transmitter''')
        self.identifyBtn.bind('<ButtonRelease-1>',lambda e:CotaDTU_support.sys_btn_cmd(e))

        self.calibrateBtn = ttk.Button(self.txCmdFrame)
        self.calibrateBtn.place(relx=0.114, rely=0.151, height=25, width=136)
        self.calibrateBtn.configure(takefocus="")
        self.calibrateBtn.configure(text='''Calibrate''')
        self.calibrateBtn.bind('<ButtonRelease-1>',lambda e:CotaDTU_support.sys_btn_cmd(e))

        self.shutdownBtn = ttk.Button(self.txCmdFrame)
        self.shutdownBtn.place(relx=0.114, rely=0.377, height=25, width=136)
        self.shutdownBtn.configure(takefocus="")
        self.shutdownBtn.configure(text='''Shutdown''')
        self.shutdownBtn.bind('<ButtonRelease-1>',lambda e:CotaDTU_support.sys_btn_cmd(e))

        self.txCmdLbl = ttk.Label(self.CotaNotebookDemo)
        self.txCmdLbl.place(relx=0.7, rely=0.431, height=19, width=145)
        self.txCmdLbl.configure(background="#d9d9d9")
        self.txCmdLbl.configure(foreground="#000000")
        self.txCmdLbl.configure(font="TkDefaultFont")
        self.txCmdLbl.configure(relief="flat")
        self.txCmdLbl.configure(text='''Transmitter Commands''')

        self.lpmSlotListTree = ScrolledTreeView(self.CotaNotebookLPM)
        self.lpmSlotListTree.place(relx=0.33, rely=0.086, relheight=0.667
                , relwidth=0.653)
        self.lpmSlotListTree.configure(columns="Col1 Col2 Col3 Col4 Col5 Col6 Col7 Col8")
        self.lpmSlotListTree.configure(cursor="arrow")
        # build_treeview_support starting.
        self.lpmSlotListTree.heading("#0",text="Receiver ID")
        self.lpmSlotListTree.heading("#0",anchor="center")
        self.lpmSlotListTree.column("#0",width="142")
        self.lpmSlotListTree.column("#0",minwidth="20")
        self.lpmSlotListTree.column("#0",stretch="1")
        self.lpmSlotListTree.column("#0",anchor="center")
        self.lpmSlotListTree.heading("Col1",text="Slot")
        self.lpmSlotListTree.heading("Col1",anchor="center")
        self.lpmSlotListTree.column("Col1",width="61")
        self.lpmSlotListTree.column("Col1",minwidth="20")
        self.lpmSlotListTree.column("Col1",stretch="1")
        self.lpmSlotListTree.column("Col1",anchor="center")
        self.lpmSlotListTree.heading("Col2",text="Antenna")
        self.lpmSlotListTree.heading("Col2",anchor="center")
        self.lpmSlotListTree.column("Col2",width="81")
        self.lpmSlotListTree.column("Col2",minwidth="20")
        self.lpmSlotListTree.column("Col2",stretch="1")
        self.lpmSlotListTree.column("Col2",anchor="center")
        self.lpmSlotListTree.heading("Col3",text="Charge (mV)")
        self.lpmSlotListTree.heading("Col3",anchor="center")
        self.lpmSlotListTree.column("Col3",width="82")
        self.lpmSlotListTree.column("Col3",minwidth="20")
        self.lpmSlotListTree.column("Col3",stretch="1")
        self.lpmSlotListTree.column("Col3",anchor="center")
        self.lpmSlotListTree.heading("Col4",text="LPM")
        self.lpmSlotListTree.heading("Col4",anchor="center")
        self.lpmSlotListTree.column("Col4",width="52")
        self.lpmSlotListTree.column("Col4",minwidth="20")
        self.lpmSlotListTree.column("Col4",stretch="1")
        self.lpmSlotListTree.column("Col4",anchor="center")
        self.lpmSlotListTree.heading("Col5",text="RSSI")
        self.lpmSlotListTree.heading("Col5",anchor="center")
        self.lpmSlotListTree.column("Col5",width="52")
        self.lpmSlotListTree.column("Col5",minwidth="20")
        self.lpmSlotListTree.column("Col5",stretch="1")
        self.lpmSlotListTree.column("Col5",anchor="center")
        self.lpmSlotListTree.heading("Col6",text="Update (m)")
        self.lpmSlotListTree.heading("Col6",anchor="center")
        self.lpmSlotListTree.column("Col6",width="82")
        self.lpmSlotListTree.column("Col6",minwidth="20")
        self.lpmSlotListTree.column("Col6",stretch="1")
        self.lpmSlotListTree.column("Col6",anchor="center")
        self.lpmSlotListTree.heading("Col7",text="Time")
        self.lpmSlotListTree.heading("Col7",anchor="center")
        self.lpmSlotListTree.column("Col7",width="92")
        self.lpmSlotListTree.column("Col7",minwidth="20")
        self.lpmSlotListTree.column("Col7",stretch="1")
        self.lpmSlotListTree.column("Col7",anchor="center")
        self.lpmSlotListTree.heading("Col8",text="Status")
        self.lpmSlotListTree.heading("Col8",anchor="center")
        self.lpmSlotListTree.column("Col8",width="167")
        self.lpmSlotListTree.column("Col8",minwidth="20")
        self.lpmSlotListTree.column("Col8",stretch="1")
        self.lpmSlotListTree.column("Col8",anchor="center")
        self.lpmSlotListTree.bind('<<TreeviewSelect>>',lambda e:CotaDTU_support.select_lpm_slot(e))

        self.lpmClientListLbl = ttk.Label(self.CotaNotebookLPM)
        self.lpmClientListLbl.place(relx=0.008, rely=0.052, height=19, width=100)

        self.lpmClientListLbl.configure(background="#d9d9d9")
        self.lpmClientListLbl.configure(foreground="#000000")
        self.lpmClientListLbl.configure(font="TkDefaultFont")
        self.lpmClientListLbl.configure(relief="flat")
        self.lpmClientListLbl.configure(text='''Receiver List''')

        self.lpmSlotListLbl = ttk.Label(self.CotaNotebookLPM)
        self.lpmSlotListLbl.place(relx=0.33, rely=0.052, height=19, width=76)
        self.lpmSlotListLbl.configure(background="#d9d9d9")
        self.lpmSlotListLbl.configure(foreground="#000000")
        self.lpmSlotListLbl.configure(font="TkDefaultFont")
        self.lpmSlotListLbl.configure(relief="flat")
        self.lpmSlotListLbl.configure(text='''ESL List''')

        self.lpmRxListTree = ScrolledTreeView(self.CotaNotebookLPM)
        self.lpmRxListTree.place(relx=0.008, rely=0.086, relheight=0.271
                , relwidth=0.26)
        self.lpmRxListTree.configure(columns="Col1")
        # build_treeview_support starting.
        self.lpmRxListTree.heading("#0",text="Receiver ID")
        self.lpmRxListTree.heading("#0",anchor="center")
        self.lpmRxListTree.column("#0",width="150")
        self.lpmRxListTree.column("#0",minwidth="20")
        self.lpmRxListTree.column("#0",stretch="0")
        self.lpmRxListTree.column("#0",anchor="center")
        self.lpmRxListTree.heading("Col1",text="Status")
        self.lpmRxListTree.heading("Col1",anchor="center")
        self.lpmRxListTree.column("Col1",width="161")
        self.lpmRxListTree.column("Col1",minwidth="20")
        self.lpmRxListTree.column("Col1",stretch="1")
        self.lpmRxListTree.column("Col1",anchor="center")
        self.lpmRxListTree.bind('<<TreeviewSelect>>',lambda e:CotaDTU_support.select_rx(e))

        self.lpmSysCmdFrame = ttk.Frame(self.CotaNotebookLPM)
        self.lpmSysCmdFrame.place(relx=0.008, rely=0.776, relheight=0.129
                , relwidth=0.974)
        self.lpmSysCmdFrame.configure(relief='groove')
        self.lpmSysCmdFrame.configure(borderwidth="2")
        self.lpmSysCmdFrame.configure(relief="groove")

        self.lpmSetSlotsBtn = ttk.Button(self.lpmSysCmdFrame)
        self.lpmSetSlotsBtn.place(relx=0.008, rely=0.533, height=25, width=85)
        self.lpmSetSlotsBtn.configure(takefocus="")
        self.lpmSetSlotsBtn.configure(text='''Slot Count''')
        self.lpmSetSlotsBtn.bind('<ButtonRelease-1>',lambda e:CotaDTU_support.lpm_rx_btn(e))

        self.lpmCalBtn = ttk.Button(self.lpmSysCmdFrame)
        self.lpmCalBtn.place(relx=0.008, rely=0.133, height=25, width=85)
        self.lpmCalBtn.configure(takefocus="")
        self.lpmCalBtn.configure(text='''Calibrate''')
        self.lpmCalBtn.bind('<ButtonRelease-1>',lambda e:CotaDTU_support.sys_btn_cmd(e))

        self.lpmStartChargeBtn = ttk.Button(self.lpmSysCmdFrame)
        self.lpmStartChargeBtn.place(relx=0.331, rely=0.133, height=25, width=95)

        self.lpmStartChargeBtn.configure(takefocus="")
        self.lpmStartChargeBtn.configure(text='''Start Charging''')
        self.lpmStartChargeBtn.bind('<ButtonRelease-1>',lambda e:CotaDTU_support.lpm_rx_btn(e))

        self.lpmStopChargeBtn = ttk.Button(self.lpmSysCmdFrame)
        self.lpmStopChargeBtn.place(relx=0.331, rely=0.533, height=25, width=95)
        self.lpmStopChargeBtn.configure(takefocus="")
        self.lpmStopChargeBtn.configure(text='''Stop Charging''')
        self.lpmStopChargeBtn.bind('<ButtonRelease-1>',lambda e:CotaDTU_support.lpm_rx_btn(e))

        self.lpmLoadWhitelistBtn = ttk.Button(self.lpmSysCmdFrame)
        self.lpmLoadWhitelistBtn.place(relx=0.081, rely=0.133, height=25
                , width=65)
        self.lpmLoadWhitelistBtn.configure(takefocus="")
        self.lpmLoadWhitelistBtn.configure(text='''Load List''')
        self.lpmLoadWhitelistBtn.bind('<ButtonRelease-1>',lambda e:CotaDTU_support.lpm_load_whitelist(e))

        self.lpmStartAssignBtn = ttk.Button(self.lpmSysCmdFrame)
        self.lpmStartAssignBtn.place(relx=0.137, rely=0.133, height=25, width=65)

        self.lpmStartAssignBtn.configure(command=CotaDTU_support.start_auto_assignment)
        self.lpmStartAssignBtn.configure(takefocus="")
        self.lpmStartAssignBtn.configure(text='''Start Auto''')

        self.lpmStopAssignBtn = ttk.Button(self.lpmSysCmdFrame)
        self.lpmStopAssignBtn.place(relx=0.137, rely=0.533, height=25, width=65)
        self.lpmStopAssignBtn.configure(command=CotaDTU_support.stop_auto_assignment)
        self.lpmStopAssignBtn.configure(takefocus="")
        self.lpmStopAssignBtn.configure(text='''Stop Auto''')

        self.lpmViewWhitelistBtn = ttk.Button(self.lpmSysCmdFrame)
        self.lpmViewWhitelistBtn.place(relx=0.081, rely=0.533, height=25
                , width=65)
        self.lpmViewWhitelistBtn.configure(command=CotaDTU_support.display_whitelist)
        self.lpmViewWhitelistBtn.configure(takefocus="")
        self.lpmViewWhitelistBtn.configure(text='''View List''')

        self.lpmAddBtn = ttk.Button(self.CotaNotebookLPM)
        self.lpmAddBtn.place(relx=0.275, rely=0.086, height=25, width=65)
        self.lpmAddBtn.configure(takefocus="")
        self.lpmAddBtn.configure(text='''Assign >''')
        self.lpmAddBtn.bind('<ButtonRelease-1>',lambda e:CotaDTU_support.lpm_rx_btn(e))

        self.lpmRxDetailTree = ScrolledTreeView(self.CotaNotebookLPM)
        self.lpmRxDetailTree.place(relx=0.008, rely=0.431, relheight=0.288
                , relwidth=0.26)
        self.lpmRxDetailTree.configure(columns="Col1")
        # build_treeview_support starting.
        self.lpmRxDetailTree.heading("#0",text="Parameter")
        self.lpmRxDetailTree.heading("#0",anchor="center")
        self.lpmRxDetailTree.column("#0",width="150")
        self.lpmRxDetailTree.column("#0",minwidth="20")
        self.lpmRxDetailTree.column("#0",stretch="0")
        self.lpmRxDetailTree.column("#0",anchor="w")
        self.lpmRxDetailTree.heading("Col1",text="Value")
        self.lpmRxDetailTree.heading("Col1",anchor="center")
        self.lpmRxDetailTree.column("Col1",width="162")
        self.lpmRxDetailTree.column("Col1",minwidth="20")
        self.lpmRxDetailTree.column("Col1",stretch="1")
        self.lpmRxDetailTree.column("Col1",anchor="w")

        self.lpmSysCmdsLbl = ttk.Label(self.CotaNotebookLPM)
        self.lpmSysCmdsLbl.place(relx=0.008, rely=0.741, height=19, width=117)
        self.lpmSysCmdsLbl.configure(background="#d9d9d9")
        self.lpmSysCmdsLbl.configure(foreground="#000000")
        self.lpmSysCmdsLbl.configure(font="TkDefaultFont")
        self.lpmSysCmdsLbl.configure(relief="flat")
        self.lpmSysCmdsLbl.configure(text='''System Commands''')

        self.lpmDetailLbl = ttk.Label(self.CotaNotebookLPM)
        self.lpmDetailLbl.place(relx=0.008, rely=0.397, height=19, width=100)
        self.lpmDetailLbl.configure(background="#d9d9d9")
        self.lpmDetailLbl.configure(foreground="#000000")
        self.lpmDetailLbl.configure(font="TkDefaultFont")
        self.lpmDetailLbl.configure(relief="flat")
        self.lpmDetailLbl.configure(text='''Receiver Details''')

        self.debugClientListLbl = ttk.Label(self.CotaNotebookDebug)
        self.debugClientListLbl.place(relx=0.008, rely=0.033, height=19
                , width=75)
        self.debugClientListLbl.configure(background="#d9d9d9")
        self.debugClientListLbl.configure(foreground="#000000")
        self.debugClientListLbl.configure(font="TkDefaultFont")
        self.debugClientListLbl.configure(relief="flat")
        self.debugClientListLbl.configure(text='''Receiver List''')

        self.debugClientListTree = ScrolledTreeView(self.CotaNotebookDebug)
        self.debugClientListTree.place(relx=0.008, rely=0.069, relheight=0.34
                , relwidth=0.33)
        self.debugClientListTree.configure(columns="Col1 Col2")
        # build_treeview_support starting.
        self.debugClientListTree.heading("#0",text="Receiver ID")
        self.debugClientListTree.heading("#0",anchor="center")
        self.debugClientListTree.column("#0",width="150")
        self.debugClientListTree.column("#0",minwidth="20")
        self.debugClientListTree.column("#0",stretch="0")
        self.debugClientListTree.column("#0",anchor="center")
        self.debugClientListTree.heading("Col1",text="Link Quality")
        self.debugClientListTree.heading("Col1",anchor="center")
        self.debugClientListTree.column("Col1",width="100")
        self.debugClientListTree.column("Col1",minwidth="20")
        self.debugClientListTree.column("Col1",stretch="0")
        self.debugClientListTree.column("Col1",anchor="center")
        self.debugClientListTree.heading("Col2",text="Status")
        self.debugClientListTree.heading("Col2",anchor="center")
        self.debugClientListTree.column("Col2",width="150")
        self.debugClientListTree.column("Col2",minwidth="20")
        self.debugClientListTree.column("Col2",stretch="1")
        self.debugClientListTree.column("Col2",anchor="center")
        self.debugClientListTree.bind('<<TreeviewSelect>>',lambda e:CotaDTU_support.select_rx(e))
        self.debugClientListTree.bind('<Control-Key-c>',lambda e:CotaDTU_support.copy_id(e))

        self.loadConfigBtn = ttk.Button(self.CotaNotebookDebug)
        self.loadConfigBtn.place(relx=0.008, rely=0.845, height=25, width=76)
        self.loadConfigBtn.configure(command=CotaDTU_support.load_cota_config)
        self.loadConfigBtn.configure(takefocus="")
        self.loadConfigBtn.configure(text='''Load''')

        self.saveConfigBtn = ttk.Button(self.CotaNotebookDebug)
        self.saveConfigBtn.place(relx=0.071, rely=0.845, height=25, width=76)
        self.saveConfigBtn.configure(command=CotaDTU_support.save_cota_config)
        self.saveConfigBtn.configure(takefocus="")
        self.saveConfigBtn.configure(text='''Save''')

        self.cotaConfigTree = ScrolledTreeView(self.CotaNotebookDebug)
        self.cotaConfigTree.place(relx=0.008, rely=0.466, relheight=0.357
                , relwidth=0.33)
        self.cotaConfigTree.configure(columns="Col1")
        # build_treeview_support starting.
        self.cotaConfigTree.heading("#0",text="Parameter")
        self.cotaConfigTree.heading("#0",anchor="center")
        self.cotaConfigTree.column("#0",width="200")
        self.cotaConfigTree.column("#0",minwidth="20")
        self.cotaConfigTree.column("#0",stretch="1")
        self.cotaConfigTree.column("#0",anchor="w")
        self.cotaConfigTree.heading("Col1",text="Value")
        self.cotaConfigTree.heading("Col1",anchor="center")
        self.cotaConfigTree.column("Col1",width="200")
        self.cotaConfigTree.column("Col1",minwidth="20")
        self.cotaConfigTree.column("Col1",stretch="1")
        self.cotaConfigTree.column("Col1",anchor="w")
        self.cotaConfigTree.bind('<Double-Button-1>',lambda e: CotaDTU_support.edit_config_val(e))

        self.configParamsLbl = ttk.Label(self.CotaNotebookDebug)
        self.configParamsLbl.place(relx=0.008, rely=0.426, height=19, width=155)
        self.configParamsLbl.configure(background="#d9d9d9")
        self.configParamsLbl.configure(foreground="#000000")
        self.configParamsLbl.configure(font="TkDefaultFont")
        self.configParamsLbl.configure(relief="flat")
        self.configParamsLbl.configure(anchor='w')
        self.configParamsLbl.configure(justify='left')
        self.configParamsLbl.configure(text='''Transmitter Configuration''')

        self.advTxCmdFrameLbl = ttk.Label(self.CotaNotebookDebug)
        self.advTxCmdFrameLbl.place(relx=0.359, rely=0.431, height=19, width=155)

        self.advTxCmdFrameLbl.configure(background="#d9d9d9")
        self.advTxCmdFrameLbl.configure(foreground="#000000")
        self.advTxCmdFrameLbl.configure(font="TkDefaultFont")
        self.advTxCmdFrameLbl.configure(relief="flat")
        self.advTxCmdFrameLbl.configure(anchor='w')
        self.advTxCmdFrameLbl.configure(justify='left')
        self.advTxCmdFrameLbl.configure(text='''Transmitter Commands''')

        self.clientCmdLbl_2 = ttk.Label(self.CotaNotebookDebug)
        self.clientCmdLbl_2.place(relx=0.362, rely=0.033, height=19, width=170)
        self.clientCmdLbl_2.configure(background="#d9d9d9")
        self.clientCmdLbl_2.configure(foreground="#000000")
        self.clientCmdLbl_2.configure(font="TkDefaultFont")
        self.clientCmdLbl_2.configure(relief="flat")
        self.clientCmdLbl_2.configure(text='''Receiver Commands''')

        self.sendCltCmdBtn = ttk.Button(self.CotaNotebookDebug)
        self.sendCltCmdBtn.place(relx=0.362, rely=0.276, height=25, width=56)
        self.sendCltCmdBtn.configure(command=CotaDTU_support.send_app_cmd)
        self.sendCltCmdBtn.configure(takefocus="")
        self.sendCltCmdBtn.configure(text='''Send''')

        self.getCltDataBtn = ttk.Button(self.CotaNotebookDebug)
        self.getCltDataBtn.place(relx=0.456, rely=0.276, height=25, width=56)
        self.getCltDataBtn.configure(command=CotaDTU_support.get_app_cmd_data)
        self.getCltDataBtn.configure(takefocus="")
        self.getCltDataBtn.configure(text='''Read''')

        self.clientCmdRespEntry = ttk.Entry(self.CotaNotebookDebug)
        self.clientCmdRespEntry.place(relx=0.362, rely=0.362, relheight=0.036
                , relwidth=0.249)
        self.clientCmdRespEntry.configure(takefocus="")
        self.clientCmdRespEntry.configure(cursor="arrow")

        self.clientCmdDataRespLbl = ttk.Label(self.CotaNotebookDebug)
        self.clientCmdDataRespLbl.place(relx=0.362, rely=0.328, height=19
                , width=55)
        self.clientCmdDataRespLbl.configure(background="#d9d9d9")
        self.clientCmdDataRespLbl.configure(foreground="#000000")
        self.clientCmdDataRespLbl.configure(font="TkDefaultFont")
        self.clientCmdDataRespLbl.configure(relief="flat")
        self.clientCmdDataRespLbl.configure(text='''Response''')

        self.clientCmdSendEntry = ttk.Entry(self.CotaNotebookDebug)
        self.clientCmdSendEntry.place(relx=0.415, rely=0.279, relheight=0.036
                , relwidth=0.036)
        self.clientCmdSendEntry.configure(takefocus="")
        self.clientCmdSendEntry.configure(cursor="arrow")

        self.advancedRxList = ScrolledListBox(self.CotaNotebookDebug)
        self.advancedRxList.place(relx=0.362, rely=0.069, relheight=0.198
                , relwidth=0.253)
        self.advancedRxList.configure(activestyle="dotbox")
        self.advancedRxList.configure(background="white")
        self.advancedRxList.configure(cursor="arrow")
        self.advancedRxList.configure(disabledforeground="#a3a3a3")
        self.advancedRxList.configure(exportselection="0")
        self.advancedRxList.configure(font="-family {Courier New} -size 10")
        self.advancedRxList.configure(foreground="black")
        self.advancedRxList.configure(highlightbackground="#d9d9d9")
        self.advancedRxList.configure(highlightcolor="#d9d9d9")
        self.advancedRxList.configure(selectbackground="#0076d7")
        self.advancedRxList.configure(selectforeground="#ffffff")
        self.advancedRxList.configure(selectmode='single')
        self.advancedRxList.bind('<ButtonRelease-1>',lambda e:CotaDTU_support.clear_user_args(e))

        self.sendAdvancedTxBtn = ttk.Button(self.CotaNotebookDebug)
        self.sendAdvancedTxBtn.place(relx=0.362, rely=0.69, height=25, width=56)
        self.sendAdvancedTxBtn.configure(command=CotaDTU_support.send_tx_cmd)
        self.sendAdvancedTxBtn.configure(takefocus="")
        self.sendAdvancedTxBtn.configure(text='''Send''')

        self.sendAdvTxEntry = ttk.Entry(self.CotaNotebookDebug)
        self.sendAdvTxEntry.place(relx=0.415, rely=0.695, relheight=0.036
                , relwidth=0.036)
        self.sendAdvTxEntry.configure(takefocus="")
        self.sendAdvTxEntry.configure(cursor="arrow")

        self.advTxRespEntry = ttk.Entry(self.CotaNotebookDebug)
        self.advTxRespEntry.place(relx=0.362, rely=0.776, relheight=0.036
                , relwidth=0.249)
        self.advTxRespEntry.configure(takefocus="")
        self.advTxRespEntry.configure(cursor="arrow")

        self.advTxRespLbl = ttk.Label(self.CotaNotebookDebug)
        self.advTxRespLbl.place(relx=0.362, rely=0.741, height=19, width=75)
        self.advTxRespLbl.configure(background="#d9d9d9")
        self.advTxRespLbl.configure(foreground="#000000")
        self.advTxRespLbl.configure(font="TkDefaultFont")
        self.advTxRespLbl.configure(relief="flat")
        self.advTxRespLbl.configure(text='''Response''')

        self.advancedTxList = ScrolledListBox(self.CotaNotebookDebug)
        self.advancedTxList.place(relx=0.36, rely=0.466, relheight=0.216
                , relwidth=0.256)
        self.advancedTxList.configure(activestyle="dotbox")
        self.advancedTxList.configure(background="white")
        self.advancedTxList.configure(cursor="arrow")
        self.advancedTxList.configure(disabledforeground="#a3a3a3")
        self.advancedTxList.configure(exportselection="0")
        self.advancedTxList.configure(font="-family {Courier New} -size 10")
        self.advancedTxList.configure(foreground="black")
        self.advancedTxList.configure(highlightbackground="#d9d9d9")
        self.advancedTxList.configure(highlightcolor="#d9d9d9")
        self.advancedTxList.configure(selectbackground="#0076d7")
        self.advancedTxList.configure(selectforeground="#ffffff")
        self.advancedTxList.configure(selectmode='single')
        self.advancedTxList.bind('<ButtonRelease-1>',lambda e:CotaDTU_support.clear_user_args(e))

        self.downloadLogBtn = ttk.Button(self.CotaNotebookDebug)
        self.downloadLogBtn.place(relx=0.708, rely=0.569, height=25, width=76)
        self.downloadLogBtn.configure(command=CotaDTU_support.download_log_file)
        self.downloadLogBtn.configure(takefocus="")
        self.downloadLogBtn.configure(text='''Download''')

        self.deleteLogBtn = ttk.Button(self.CotaNotebookDebug)
        self.deleteLogBtn.place(relx=0.775, rely=0.569, height=25, width=76)
        self.deleteLogBtn.configure(command=CotaDTU_support.delete_log_file)
        self.deleteLogBtn.configure(takefocus="")
        self.deleteLogBtn.configure(text='''Delete''')

        self.logListLbl = ttk.Label(self.CotaNotebookDebug)
        self.logListLbl.place(relx=0.641, rely=0.31, height=19, width=77)
        self.logListLbl.configure(background="#d9d9d9")
        self.logListLbl.configure(foreground="#000000")
        self.logListLbl.configure(font="TkDefaultFont")
        self.logListLbl.configure(relief="flat")
        self.logListLbl.configure(anchor='w')
        self.logListLbl.configure(justify='left')
        self.logListLbl.configure(text='''Receiver Logs''')

        self.listLogsBtn = ttk.Button(self.CotaNotebookDebug)
        self.listLogsBtn.place(relx=0.641, rely=0.569, height=25, width=76)
        self.listLogsBtn.configure(command=CotaDTU_support.list_log_files)
        self.listLogsBtn.configure(takefocus="")
        self.listLogsBtn.configure(text='''List Files''')

        self.startLogBtn = ttk.Button(self.CotaNotebookDebug)
        self.startLogBtn.place(relx=0.641, rely=0.121, height=25, width=136)
        self.startLogBtn.configure(command=CotaDTU_support.start_logging)
        self.startLogBtn.configure(takefocus="")
        self.startLogBtn.configure(text='''Start Logging''')

        self.stopLogBtn = ttk.Button(self.CotaNotebookDebug)
        self.stopLogBtn.place(relx=0.641, rely=0.172, height=25, width=136)
        self.stopLogBtn.configure(command=CotaDTU_support.stop_logging)
        self.stopLogBtn.configure(takefocus="")
        self.stopLogBtn.configure(text='''Stop Logging''')

        self.logHrsEntry = ttk.Entry(self.CotaNotebookDebug)
        self.logHrsEntry.place(relx=0.763, rely=0.124, relheight=0.036
                , relwidth=0.036)
        self.logHrsEntry.configure(takefocus="")
        self.logHrsEntry.configure(cursor="arrow")

        self.logDelayEntry = ttk.Entry(self.CotaNotebookDebug)
        self.logDelayEntry.place(relx=0.81, rely=0.124, relheight=0.036
                , relwidth=0.035)
        self.logDelayEntry.configure(takefocus="")
        self.logDelayEntry.configure(cursor="arrow")

        self.logHrsLbl = ttk.Label(self.CotaNotebookDebug)
        self.logHrsLbl.place(relx=0.763, rely=0.086, height=19, width=53)
        self.logHrsLbl.configure(background="#d9d9d9")
        self.logHrsLbl.configure(foreground="#000000")
        self.logHrsLbl.configure(font="TkDefaultFont")
        self.logHrsLbl.configure(relief="flat")
        self.logHrsLbl.configure(anchor='w')
        self.logHrsLbl.configure(justify='left')
        self.logHrsLbl.configure(text='''Hours''')

        self.logDelayLbl = ttk.Label(self.CotaNotebookDebug)
        self.logDelayLbl.place(relx=0.81, rely=0.086, height=19, width=66)
        self.logDelayLbl.configure(background="#d9d9d9")
        self.logDelayLbl.configure(foreground="#000000")
        self.logDelayLbl.configure(font="TkDefaultFont")
        self.logDelayLbl.configure(relief="flat")
        self.logDelayLbl.configure(anchor='w')
        self.logDelayLbl.configure(justify='left')
        self.logDelayLbl.configure(text='''Delay (s)''')

        self.logCtrlLbl = ttk.Label(self.CotaNotebookDebug)
        self.logCtrlLbl.place(relx=0.641, rely=0.034, height=19, width=105)
        self.logCtrlLbl.configure(background="#d9d9d9")
        self.logCtrlLbl.configure(foreground="#000000")
        self.logCtrlLbl.configure(font="TkDefaultFont")
        self.logCtrlLbl.configure(relief="flat")
        self.logCtrlLbl.configure(anchor='w')
        self.logCtrlLbl.configure(justify='left')
        self.logCtrlLbl.configure(text='''Receiver Logging''')

        self.logfileTree = ScrolledTreeView(self.CotaNotebookDebug)
        self.logfileTree.place(relx=0.641, rely=0.348, relheight=0.217
                , relwidth=0.253)
        self.logfileTree.configure(columns="Col1")
        # build_treeview_support starting.
        self.logfileTree.heading("#0",text="Filename")
        self.logfileTree.heading("#0",anchor="center")
        self.logfileTree.column("#0",width="221")
        self.logfileTree.column("#0",minwidth="20")
        self.logfileTree.column("#0",stretch="1")
        self.logfileTree.column("#0",anchor="w")
        self.logfileTree.heading("Col1",text="Size (kb)")
        self.logfileTree.heading("Col1",anchor="center")
        self.logfileTree.column("Col1",width="81")
        self.logfileTree.column("Col1",minwidth="20")
        self.logfileTree.column("Col1",stretch="1")
        self.logfileTree.column("Col1",anchor="w")
        self.logfileTree.bind('<Double-Button-1>',lambda e: CotaDTU_support.edit_config_val(e))

        self.connectSshBtn = ttk.Button(self.CotaNotebookDebug)
        self.connectSshBtn.place(relx=0.641, rely=0.069, height=25, width=136)
        self.connectSshBtn.configure(command=CotaDTU_support.connect_ssh)
        self.connectSshBtn.configure(takefocus="")
        self.connectSshBtn.configure(text='''Connect SSH''')

        self.sshRespEntry = ttk.Entry(self.CotaNotebookDebug)
        self.sshRespEntry.place(relx=0.641, rely=0.259, relheight=0.036
                , relwidth=0.249)
        self.sshRespEntry.configure(takefocus="")
        self.sshRespEntry.configure(cursor="arrow")

        self.sshResponseLbl = ttk.Label(self.CotaNotebookDebug)
        self.sshResponseLbl.place(relx=0.641, rely=0.224, height=19, width=53)
        self.sshResponseLbl.configure(background="#d9d9d9")
        self.sshResponseLbl.configure(foreground="#000000")
        self.sshResponseLbl.configure(font="TkDefaultFont")
        self.sshResponseLbl.configure(relief="flat")
        self.sshResponseLbl.configure(text='''Response''')

        self.txLogListLbl = ttk.Label(self.CotaNotebookDebug)
        self.txLogListLbl.place(relx=0.641, rely=0.74, height=19, width=105)
        self.txLogListLbl.configure(background="#d9d9d9")
        self.txLogListLbl.configure(foreground="#000000")
        self.txLogListLbl.configure(font="TkDefaultFont")
        self.txLogListLbl.configure(relief="flat")
        self.txLogListLbl.configure(anchor='w')
        self.txLogListLbl.configure(justify='left')
        self.txLogListLbl.configure(text='''Transmitter Logs''')

        self.mcuLogBtn = ttk.Button(self.CotaNotebookDebug)
        self.mcuLogBtn.place(relx=0.641, rely=0.772, height=25, width=136)
        self.mcuLogBtn.configure(command=CotaDTU_support.get_mcu_log)
        self.mcuLogBtn.configure(takefocus="")
        self.mcuLogBtn.configure(text='''View MCU Log''')

        self.logPlotLbl = ttk.Label(self.CotaNotebookDebug)
        self.logPlotLbl.place(relx=0.641, rely=0.638, height=19, width=105)
        self.logPlotLbl.configure(background="#d9d9d9")
        self.logPlotLbl.configure(foreground="#000000")
        self.logPlotLbl.configure(font="TkDefaultFont")
        self.logPlotLbl.configure(relief="flat")
        self.logPlotLbl.configure(anchor='w')
        self.logPlotLbl.configure(justify='left')
        self.logPlotLbl.configure(text='''Data Plotting''')

        self.plotDataBtn = ttk.Button(self.CotaNotebookDebug)
        self.plotDataBtn.place(relx=0.641, rely=0.672, height=25, width=136)
        self.plotDataBtn.configure(command=CotaDTU_support.log_plot_dialog)
        self.plotDataBtn.configure(takefocus="")
        self.plotDataBtn.configure(text='''Plot Log Data''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(top,
                activebackground="#f9f9f9",
                activeborderwidth=1,
                activeforeground="black",
                background="#d9d9d9",
                borderwidth=1,
                disabledforeground="#a3a3a3",
                foreground="black",
                tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="File")
        self.sub_menu.add_command(
                command=CotaDTU_support.log_plot_dialog,
                label="Open Log")
        self.sub_menu.add_command(
                command=CotaDTU_support.search_for_tx,
                label="Search")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                command=CotaDTU_support.send_disconnect,
                font="TkMenuFont",
                foreground="#000000",
                label="Quit")
        self.sub_menu1 = tk.Menu(top,
                activebackground="#f9f9f9",
                activeborderwidth=1,
                activeforeground="black",
                background="#d9d9d9",
                borderwidth=1,
                disabledforeground="#a3a3a3",
                foreground="black",
                tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu1,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="Edit")
        self.sub_menu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                command=CotaDTU_support.enable_debug_tab,
                font="TkMenuFont",
                foreground="#000000",
                label="Debug")
        self.sub_menu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                command=CotaDTU_support.set_upd_interval,
                font="TkMenuFont",
                foreground="#000000",
                label="Update Interval")
        self.sub_menu12 = tk.Menu(top,
                activebackground="#f9f9f9",
                activeborderwidth=1,
                activeforeground="black",
                background="#d9d9d9",
                borderwidth=1,
                disabledforeground="#a3a3a3",
                foreground="black",
                tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu12,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="Help")
        self.sub_menu12.add_command(
                command=CotaDTU_support.display_help_file,
                label="Open Help")

        self.hostEntLbl = ttk.Label(top)
        self.hostEntLbl.place(relx=0.008, rely=0.016, height=19, width=62)
        self.hostEntLbl.configure(background="#d9d9d9")
        self.hostEntLbl.configure(foreground="#000000")
        self.hostEntLbl.configure(font="TkDefaultFont")
        self.hostEntLbl.configure(relief="flat")
        self.hostEntLbl.configure(text='''Hostname:''')

        self.connectBtn = ttk.Button(top)
        self.connectBtn.place(relx=0.196, rely=0.013, height=25, width=76)
        self.connectBtn.configure(command=CotaDTU_support.connect)
        self.connectBtn.configure(takefocus="")
        self.connectBtn.configure(text='''Connect''')

        self.statusLbl = ttk.Label(top)
        self.statusLbl.place(relx=0.761, rely=0.016, height=19, width=39)
        self.statusLbl.configure(background="#d9d9d9")
        self.statusLbl.configure(foreground="#000000")
        self.statusLbl.configure(font="TkDefaultFont")
        self.statusLbl.configure(relief="flat")
        self.statusLbl.configure(text='''Status:''')

        self.lastStatusEntry = ttk.Entry(top)
        self.lastStatusEntry.place(relx=0.8, rely=0.016, relheight=0.034
                , relwidth=0.177)
        self.lastStatusEntry.configure(takefocus="")
        self.lastStatusEntry.configure(cursor="arrow")

        self.hostEntry = ttk.Combobox(top)
        self.hostEntry.place(relx=0.063, rely=0.016, relheight=0.034
                , relwidth=0.129)
        self.hostEntry.configure(takefocus="")
        self.hostEntry.bind('<Key-Return>',lambda e:CotaDTU_support.connect(e))

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()






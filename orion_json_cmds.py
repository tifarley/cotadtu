jcd_orion = {
        'app_command'            : {'jstr' : '{"Command":{"Type":"AppCommand","RX ID":"%s","Msg Num":"%s","Data":"%s"},                           "Result" : {"Status":"NULL"}}', 'numofargs' : [2, []], 'help' : ['[RX ID][Data]', 'Send a generic command to a Receiver (or all Receiver).', 2]},
        'app_command_data'       : {'jstr' : '{"Command":{"Type":"AppCommandData","RX ID":"%s"},                                                  "Result" : {"Status":"NULL","Data":[]}}', 'numofargs' : 1, 'help' : ['[RX ID]', 'Get Receiver command data.', 1]},
        'bootloader'             : {'jstr' : '{"Command":{"Type":"Bootloader"},                                                                   "Result" : {"Status":"NULL"}}', 'numofargs' : 0, 'help' : ['[]', 'Reboots the MCU into the STM bootloader.', 0]},
        'calibrate'              : {'jstr' : '{"Command":{"Type":"Calibrate"},                                                                    "Result" : {"Status":"NULL"}}', 'numofargs' : 0, 'help' : ['[]', "Causes the transmitter to go through it's calibration process.", 0]},
        'charge_virtual'         : {'jstr' : '{"Command":{"Type":"ChargeVirtualRx"},                                                              "Result" : {"Status":"NULL"}}', 'numofargs' : 0, 'help' : ['[]', 'Start charging a virtual receiver.', 1]},
        'clk_i2c_disable'        : {'jstr' : '{"Command":{"Type":"ClkChipI2CBusDisable"},                                                         "Result" : {"Status":"NULL"}}', 'numofargs' : 0, 'help' : ['[]', 'Disable the I2C bus to the System Clk chip.', 0]},
        'clk_init'               : {'jstr' : '{"Command":{"Type":"SystemClkInit"},                                                                "Result" : {"Status":"NULL"}}', 'numofargs' : 0, 'help' : ['[]', "Initialize the system clock which is sent to all the ABM's.", 0]},
        'get_amb_en'             : {'jstr' : '{"Command":{"Type":"GetAmbEn"},                                                                     "Result" : {"Status":"NULL","AMB Mask": 0}}', 'numofargs' : 0, 'help' : ['[]', 'Retrieves a mask showing which AMBs are on.', 0]},
        'get_cfg_param'          : {'jstr' : '{"Command":{"Type":"GetCfgParam","Param":"%s"},                                                     "Result" : {"Status":"NULL","Value": "{}"}}', 'numofargs' : 1, 'help' : ['[Param]', 'Returns the specified config parameters.', 1]},
        'get_cli_log'            : {'jstr' : '{"Command":{"Type":"GetCliLogEntries","Num Entries":"%s"},                                          "Result" : {"Status":"NULL","Entries":[]}}', 'numofargs' : [0, 1], 'NotSet' : '50', 'help' : ['[Num Entries]', 'Get the command log from the Message Manager <default Num Entries 50 >.', 1]},
        'get_comm_channel'       : {'jstr' : '{"Command":{"Type":"GetCfgParam","Param":"CFG_COMM_CHANNEL"},                                       "Result" : {"Status":"NULL","COM Channel" : "{}"}}', 'numofargs' : 0, 'help' : ['[]', 'Get the current comm channel.', 0]},
        'get_fans_full'          : {'jstr' : '{"Command":{"Type":"GetFansFull"},                                                                  "Result" : {"Status":"NULL", "Fans Full":""}}', 'numofargs' : 0, 'help' : ['[]', "Gets the 'Fans Full' state flag", 1]},
        'get_mcu_log'            : {'jstr' : '{"Command":{"Type":"GetMcuLogEntries","Num Entries":"%s","Log File":"%s"},                          "Result" : {"Status":"NULL","Entries":[]}}', 'numofargs' : [0, 2], 'NotSet' : ['50', 'mcu'], 'help' : ['[Num Entries][Log type]', 'Get the MCU log entries or Err log entries from the Message Manager, <default Num Entries 50>, <default log MCU>.', 1]},
        'get_pd_done'            : {'jstr' : '{"Command":{"Type":"GetPdDone"},                                                                    "Result" : {"Status":"NULL","AMB Mask": 0}}', 'numofargs' : 0, 'help' : ['[]', 'Get the state of the phase detect pin for every AMB.', 0]},
        'get_power_level'        : {'jstr' : '{"Command":{"Type":"GetPowerLevel"},                                                                "Result" : {"Status":"NULL","PowerLevel":22}}', 'numofargs' : 0, 'help' : ['[]', 'Get current system power level in dBm.', 0]},
        'get_pu_all'             : {'jstr' : '{"Command":{"Type":"GetPuAll"},                                                                     "Result" : {"Status":"NULL","PIN State": 0}}', 'numofargs' : 0, 'help' : ['[]', 'Get the state of the PU all Pin, which turns on all PUs.', 0]},
        'get_pu_en'              : {'jstr' : '{"Command":{"Type":"GetPuEn"},                                                                      "Result" : {"Status":"NULL","AMB Mask": 0}}', 'numofargs' : 0, 'help' : ['[]', "Retrieves a mask showing which AMB's pu's are on.", 0]},
        'get_rssi_filter_en'     : {'jstr' : '{"Command":{"Type":"GetRssiFilterEn"},                                                              "Result" : {"Status":"NULL"}}', 'numofargs' : 0, 'help' : ['[]', 'Returns the current state of RSSI filtering.', 0]},
        'get_rx_on'              : {'jstr' : '{"Command":{"Type":"GetRxOnOff"},                                                                   "Result" : {"Status":"NULL","RXCtrl State": 0}}', 'numofargs' : 0, 'help' : ['[]', 'Return the state of  RX_CTRL line.', 0]},
        'get_selected_uvp'       : {'jstr' : '{"Command":{"Type":"GetSelectedUvp"},                                                               "Result" : {"Status":"NULL","UVP Number": 0}}', 'numofargs' : 0, 'help' : ['[]', 'Get the selected UVP number.', 0]},
        'get_spi_en'             : {'jstr' : '{"Command":{"Type":"GetSpiEn"},                                                                     "Result" : {"Status":"NULL","AMB Mask": 0}}', 'numofargs' : 0, 'help' : ['[]', 'Retrieves a mask showing which AMBs have SPI enabled.', 0]},
        'get_sys_clk_cfg'        : {'jstr' : '{"Command":{"Type":"GetSysClkCfg"},                                                                 "Result" : {"Status":"NULL","Mode": 0}}', 'numofargs' : 0, 'help' : ['[]', 'Get the system clock configuration.', 0]},
        'get_system_state'       : {'jstr' : '{"Command":{"Type":"GetSystemState"},                                                               "Result" : {"Status":"NULL","System State":0}}', 'numofargs' : 0, 'help' : ['[]', 'Get the current system status.', 0]},
        'get_system_temp'        : {'jstr' : '{"Command":{"Type":"GetSystemTemp"},                                                                "Result" : {"Status":"NULL"}}', 'numofargs' : 0, 'help' : ['[]', 'Get the current system and AMB/UVP temperatures.', 0]},
        'get_tx_freq'            : {'jstr' : '{"Command":{"Type":"GetCfgParam","Param":"CFG_TX_FREQUENCY_MHZ"},                                   "Result" : {"Status":"NULL", "Tx Freq":"{}"}}', 'numofargs' : 0, 'help' : ['[]', 'Returns the cfg parameter transmit frequency.', 0]},
        'get_tx_on'              : {'jstr' : '{"Command":{"Type":"GetTxOnOff"},                                                                   "Result" : {"Status":"NULL","TX State": ""}}', 'numofargs' : 0, 'help' : ['[]', 'Return the state of the TXCtrl signal line.', 0]},
        'get_uvp_en'             : {'jstr' : '{"Command":{"Type":"GetUvpEn"},                                                                     "Result" : {"Status":"NULL","AMB Mask": ""}}', 'numofargs' : 0, 'help' : ['[]', "Retrieves a mask showing which AMB's uvp's are on.", 0]},
        'get_valid_amb_mask'     : {'jstr' : '{"Command":{"Type":"GetCfgParam","Param":"CFG_VALID_AMB_MASK"},                                     "Result" : {"Status":"NULL","Valid Ambs":"0x{:X}"}}', 'numofargs' : 0, 'help' : ['[]', 'Get the Valid AMB Mask setting.', 0]},
        'identify_rx'            : {'jstr' : '{"Command":{"Type":"AppCommand","RX ID":"%s","Msg Num":"1","Defined Len":"2","Data":"%s"},          "Result" : {"Status":"NULL"}}', 'numofargs' : [1, 2], 'NotSet' : '5', 'help' : ['[RX ID][Duration]', "Identify the receiver (blink receiver's LED).", 2]},
        'identify_tx'            : {'jstr' : '{"Command":{"Type":"IdentifyTx"},                                                                   "Result" : {"Status":"NULL"}}', 'numofargs' : 0, 'help' : ['[]', 'Set the light ring to signal Transmitter presence.', 0]},
        'lock_detect'            : {'jstr' : '{"Command":{"Type":"LockDetect","AMB Mask":"%s", "UVP Mask":"%s"},                                  "Result" : {"Status":"NULL", "Lock Result":[]}}', 'numofargs' : [0, 2], 'NotSet' : 'all', 'LongRead' : 25000, 'help' : ['[AMB or all] [UVP or all]', 'Executes the lock detect algorithm on the specified UVP(s).', 2]},
        'pause'                  : {'jstr' : '{"Command":{"Type":"PauseTps"},                                                                     "Result" : {"Status":"NULL"}}', 'numofargs' : 0, 'help' : ['[]', 'Pause the Power Cycle and enter debug mode.', 0]},
        'proxy_command'          : {'jstr' : '{"Command":{"Type":"ProxyCommand","Msg Type":"%s","Data":"%s"},                                     "Result" : {"Status":"NULL", "Data":[]}}', 'numofargs' : [1, []], 'help' : ['[Data]', 'Send a generic command to the proxy.', 1]},
        'proxy_command_data'     : {'jstr' : '{"Command":{"Type":"ProxyCommandData"},                                                             "Result" : {"Status":"NULL","Size":"","Msg Type":"","Data":[]}}', 'numofargs' : 0, 'help' : ['[]', 'Get proxy command data.', 0]},
        'proxy_info'             : {'jstr' : '{"Command":{"Type":"ProxyInfo"},                                                                    "Result" : {"Status":"NULL","Code Revision":""}}', 'numofargs' : 0, 'help' : ['[]', 'Get proxy Information: revision, status.', 0]},
        'reboot'                 : {'jstr' : '{"Command":{"Type":"Reboot", "Arg" : "%s"},                                                         "Result" : {"Status":"NULL"}}', 'numofargs' : [0, 1], 'NotSet' : 'all', 'help' : ['[hard, all, mcu, rpi]', 'Reboot the system hard=toggle mcu gpio only, all=soft mcu/rpi, mcu=soft mcu, rpi=rpi.', 0]},
        'register_rx'            : {'jstr' : '{"Command":{"Type":"RegisterRx","RX ID":"%s","QueryType":"%s"},                                     "Result" : {"Status":"NULL"}}', 'numofargs' : [1, 2], 'NotSet' : '5', 'help' : ['[RX ID [QueryType 5 or 6]]', 'Register a new receiver with the system that has been discovered.', 1]},
        'remove_rx'              : {'jstr' : '{"Command":{"Type":"RemoveRx","RX ID":"%s"},                                                        "Result" : {"Status":"NULL"}}', 'numofargs' : 1, 'help' : ['[RX ID]', 'Remove a receiver from the registered receiver list. "all" is valid.', 3]},
        'reset_array'            : {'jstr' : '{"Command":{"Type":"ResetArray"},                                                                   "Result" : {"Status":"NULL"}}', 'numofargs' : 0, 'help' : ['[]', 'Disable all UVPs and AMBs, Enable Valid AMBs, init UVPs, and calibrate.', 0]},
        'reset_host'             : {'jstr' : '{"Command":{"Type":"ResetHostMcu","Hold Time":"%s","Block Time" : "%s"},                            "Result" : {"Status":"NULL"}}', 'numofargs' : [0, 2], 'NotSet' : ['0.5', '1.0'], 'help' : [None, 'Reset the Host MCU using the GPIO reset line. Hold time = reset assert time, Block time = Wait for reset to finish.', 0]},
        'reset_nvm'              : {'jstr' : '{"Command":{"Type":"ResetNvm"},                                                                     "Result" : {"Status":"NULL"}}', 'numofargs' : 0, 'help' : ['[]', 'Reset the non-volatile memory to its default values.', 0]},
        'reset_proxy'            : {'jstr' : '{"Command":{"Type":"ResetProxy"},                                                                   "Result" : {"Status":"NULL"}}', 'numofargs' : 0, 'help' : ['[]', 'Resets the proxy and resends the discovery message.', 0]},
        'rpi_host'               : {'jstr' : '{"Command":{"Type":"SendRecvRpiHostRpiData","Data":"%s","Timeout":"%s"},                            "Result" : {"Status":"NULL","Data":[]}}', 'numofargs' : [1, 2], 'NotSet' : '-1', 'help' : ['[Bytes [Wait]]', "Send and/or Receive data packets to/from the Host MCU SW. 'Bytes' are CSV's no spaces, optional wait for data in ms.", 1]},
        'rssi_filter_report'     : {'jstr' : '{"Command":{"Type":"GetRssiFilterReport"},                                                          "Result" : {"Status":"NULL"}}', 'numofargs' : 0, 'help' : ['[]', 'Returns the rssi filtering report values if TPS is frozen.', 1]},
        'rssi_filter_reset'      : {'jstr' : '{"Command":{"Type":"RssiFilterReset"},                                                              "Result" : {"Status":"NULL"}}', 'numofargs' : 0, 'help' : ['[]', 'Resets the RSSI filtering Threshold values.', 0]},
        'rssi_filtered_ambs'     : {'jstr' : '{"Command":{"Type":"RssiFilterAmbs"},                                                               "Result" : {"Status":"NULL"}}', 'numofargs' : 0, 'help' : ['[]', "Display which AMB's are disabled by RSSI filtering.", 0]},
        'run'                    : {'jstr' : '{"Command":{"Type":"RunTps"},                                                                       "Result" : {"Status":"NULL"}}', 'numofargs' : 0, 'help' : ['[]', 'Start running the Power Cycle automatically.', 0]},
        'rx_config'              : {'jstr' : '{"Command":{"Type":"SetRxConfig","RX ID":"%s","QueryType":"%s"},                                    "Result" : {"Status":"NULL"}}', 'numofargs' : 2, 'help' : ['[RX ID][QueryType(5=STD  6=EXT)]', 'Set configuration for a specific receiver.', 2]},
        'rx_detail'              : {'jstr' : '{"Command":{"Type":"GetRxDetail","RX ID":"%s"},                                                     "Result" : {"Status":"NULL", "LinkQuality": 0, "QueryFailedCount": 0, "Short ID": "0", "QueryType": 0, "DeviceStatus": 0, "RX ID": "", "State": 0, "Version": 0, "Model": 0, "ProxyRSSIValue": 0}}', 'numofargs' : 1, 'help' : ['[RX ID]', 'Get detailed information for a specific receiver.', 1]},
        'rx_list'                : {'jstr' : '{"Command":{"Type":"GetRxList","SWITCH":"RX_LIST","All":"%s"},                                      "Result" : {"Status":"NULL","Receivers":[{"Short ID":"","RX ID":"","State":"","Battery Level":"","Status Flags":"","Average Power":"","Peak Power":"","RSSI":"","Link Quality":"","Net Current":""}]}}', 'numofargs' : [0, 1], 'NotSet' : 'ns', 'LongRead' : 25000, 'help' : ['[]', 'Displays each receiver that has been discovered.', 0]},
        'lpm_assign'             : {'jstr' : '{"Command":{"Type":"LpmAssign","RX ID":"%s","Slot Number":"%s"},                                    "Result" : {"Status":"NULL"}}',                                                                                                                                                                            'numofargs' : 2,'mmServer' : 'lpmAssign', 'help':['[RX ID][Slot Num]', 'Assign a lpm charge slot to a receiver.', 2]},
        'lpm_free'               : {'jstr' : '{"Command":{"Type":"LpmFree","Slot Number":"%s"},                                                   "Result" : {"Status":"NULL"}}',                                                                                                                                                                            'numofargs' : 1,'mmServer' : 'lpmFree', 'help':['[Slot Number]', 'Free a lpm charge slot.', 1]},
        'lpm_list'               : {'jstr' : '{"Command":{"Type":"LpmList"},                                                                      "Result" : {"Status":"NULL", "Number" : "0", "Slots":[] }}',                                                                                                                                               'numofargs' : 0,'mmServer' : 'lpmList', 'help':['[]', 'List all the lpm charge slots.', 0]},
        'lpm_slots'              : {'jstr' : '{"Command":{"Type":"LpmSlots","Slots":"%s"},                                                        "Result" : {"Status":"NULL"}}',                                                                                                                                                                            'numofargs' : 1,'mmServer' : 'lpmSlots', 'help':['[Number of Slots]', 'Sets the number of slots for lpm mode [1-40].', 1]},
        'rx_sleep'               : {'jstr' : '{"Command":{"Type":"AppCommand","RX ID":"%s","Msg Num":"2","Data":"[]"},                            "Result" : {"Status":"NULL"}}', 'numofargs' : 1, 'help' : ['[RX ID | all]', 'Command a receiver (or all) to enter deep sleep mode.', 1]},
        'sample_beacon'          : {'jstr' : '{"Command":{"Type":"SampleBeacon"},                                                                 "Result" : {"Status":"NULL"}}', 'numofargs' : 0, 'help' : ['[]', 'Sample the beacon. Usually after a static_tune_start has been called and the receiver has been commended to beacon.', 0]},
        'select_uvp'             : {'jstr' : '{"Command":{"Type":"SelectUvp", "UVP": "%s"},                                                       "Result" : {"Status":"NULL"}}', 'numofargs' : 1, 'help' : ['[UVP Number 0-15 | all]', "Selects UVP's to interact with.", 1]},
        'send_disc'              : {'jstr' : '{"Command":{"Type":"SendDiscoveryMessage", "COM Channel":"%s"},                                     "Result" : {"Status":"NULL"}}', 'numofargs' : [0, 1], 'NotSet' : '0', 'help' : ['[Channel]', 'Send a receiver discovery message. Channel is optional.', 1]},
        'server_start_status'    : {'jstr' : '{"Command":{"Type":"GetServerStartStatus"},                                                         "Result" : {"Status":"NULL","Start Start":""}}', 'numofargs' : 0, 'help' : ['[]', 'Report the Server start status. ', 0]},
        'server_version'         : {'jstr' : '{"Command":{"Type":"GetVersion"},                                                                   "Result" : {"Status":"NULL","Version":""}}', 'numofargs' : 0, 'help' : ['[]', 'Report the current Server and CLI versions Json Command Dictionary (JCD) versions.', 0]},
        'set_amb_en'             : {'jstr' : '{"Command":{"Type":"SetAmbEn", "AMB Mask": "%s", "On Off" : "%s"},                                  "Result" : {"Status":"NULL"}}', 'numofargs' : 2, 'help' : ['[AMB Mask][On Off]', 'Turn on or off AMBs for a specified AMB Mask.', 2]},
        'set_cfg_param'          : {'jstr' : '{"Command":{"Type":"SetCfgParam","Param":"%s","Value":"%s"},                                        "Result" : {"Status":"NULL"}}', 'numofargs' : 2, 'help' : ['[Param] [Value]', 'Sets the specified config param.', 0]},
        'set_comm_channel'       : {'jstr' : '{"Command":{"Type":"SetCommChannel","COM Channel":"%s","RX ID":"%s"},                               "Result" : {"Status":"NULL"}}', 'numofargs' : [1, 2], 'NotSet' : '0', 'help' : ['[24-26 [RX ID]]', 'Set comm channel for the system.', 1]},
        'set_fans_full'          : {'jstr' : '{"Command":{"Type":"SetFansFull","On Off":"%s"},                                                    "Result" : {"Status":"NULL"}}', 'numofargs' : 1, 'help' : ['[On Off]', "Sets the 'Fans Full' state on or off, <0 or 'off'> <1 or 'on'>.", 1]},
        'set_power_level'        : {'jstr' : '{"Command":{"Type":"SetPowerLevel","PowerLevel":"%s"},                                              "Result" : {"Status":"NULL", "Actual PwrLvl" : ""}}', 'numofargs' : 1, 'NotSet' : '20', 'help' : ['[PowerLevel]', 'Set the system power level in dBm. 13, 16, 19, 19.5, 20', 1]},
        'set_pu_all'             : {'jstr' : '{"Command":{"Type":"SetPuAll", "On Off" : "%s"},                                                    "Result" : {"Status":"NULL"}}', 'numofargs' : 1, 'help' : ['[On Off]', 'Set the pu all pin On(1) or off(0).', 1]},
        'set_pu_en'              : {'jstr' : '{"Command":{"Type":"SetPuEn", "AMB Mask": "%s", "On Off" : "%s"},                                   "Result" : {"Status":"NULL"}}', 'numofargs' : 2, 'help' : ['[AMB Mask][On Off]', "Set or reset the specified AMB's phase update pin.", 1]},
        'set_rssi_filter_en'     : {'jstr' : '{"Command":{"Type":"SetRssiFilterEn", "On Off": "%s"},                                              "Result" : {"Status":"NULL"}}', 'numofargs' : 1, 'help' : ['[On Off]', 'Enables/Disables the RSSI filtering process.', 0]},
        'set_rssi_threshold'     : {'jstr' : '{"Command":{"Type":"SetRssiThreshold","Samples":"%s","Dev dBm":"%s"},                               "Result" : {"Status":"NULL"}}', 'numofargs' : 2, 'NotSet' : '0', 'help' : ['[Samples] [Deviation dBm]', 'Set up RSSI Threshold parameters.', 1]},
        'set_rx_on'              : {'jstr' : '{"Command":{"Type":"SetRxOnOff", "On Off" : "%s"},                                                  "Result" : {"Status":"NULL"}}', 'numofargs' : 1, 'help' : ['[On Off]', 'Set the RXCtrl  signal line on or off.', 1]},
        'set_spi_en'             : {'jstr' : '{"Command":{"Type":"SetSpiEn", "AMB Mask" : "%s", "On Off" : "%s"},                                 "Result" : {"Status":"NULL"}}', 'numofargs' : 2, 'help' : ['[AMB Mask ][on/1 | off/0]', 'Enable or Disable SPI transfers for the specified AMBs.', 2]},
        'set_sys_clk_cfg'        : {'jstr' : '{"Command":{"Type":"SetSysClkCfg", "Mode": "%s"},                                                   "Result" : {"Status":"NULL"}}', 'numofargs' : 1, 'help' : ['[mode]', "0 = AMB's only, 1 = AMB'S + TAM, 2 = AMB's + dual tile, 3 = AMB's, TAM and dual tile.", 1]},
        'set_tx_freq'            : {'jstr' : '{"Command":{"Type":"SetTxFreq","Frequency":"%s"},                                                   "Result" : {"Status":"NULL"}}', 'numofargs' : 1, 'NotSet' : '2450', 'help' : ['[Freq in Mhz]', 'Sets the transmit frequency. If 0, the com channel will be used to set the frequency.', 1]},
        'set_tx_on'              : {'jstr' : '{"Command":{"Type":"SetTxOnOff", "On Off" : "%s"},                                                  "Result" : {"Status":"NULL"}}', 'numofargs' : 1, 'help' : ['[On Off]', 'Set on or off the TXCtrl signal line.', 0]},
        'set_uvp_en'             : {'jstr' : '{"Command":{"Type":"SetUvpEn", "AMB Mask": "%s", "On Off" : "%s"},                                  "Result" : {"Status":"NULL"}}', 'numofargs' : 2, 'help' : ['[AMB Mask][On Off]', "Turn UVP's on or off for a specified AMB Mask.", 1]},
        'set_valid_amb_mask'     : {'jstr' : '{"Command":{"Type":"SetCfgParam","Param":"CFG_VALID_AMB_MASK","Value":"%s"},                        "Result" : {"Status":"NULL"}}', 'numofargs' : 1, 'help' : ['[0x0-0xF]', 'Set valid AMBs to use as default settings.', 1]},
        'show_cfg_names'         : {'jstr' : '{"Command":{"Type":"ShowCfgNames","SearchStr":"%s"},                                                "Result" : {"Status":"NULL","CFG Items":[]}}', 'numofargs' : [0, 1], 'NotSet' : '', 'help' : ['[SearchStr]', 'Show CFG Names.', 1]},
        'show_uvp_names'         : {'jstr' : '{"Command":{"Type":"ShowUvpRegisterNames","SearchStr":"%s", "Extended":"%s","Quiet":"%s"},          "Result" : {"Status":"NULL","Search Results":[]}}', 'numofargs' : [0, 3], 'NotSet' : '', 'help' : ['[SearchStr] [Extended] [Quiet]', 'Show UVP Register Names. Extended info, Quiet about instructions.', 3]},
        'shutdown'               : {'jstr' : '{"Command":{"Type":"ShutdownCcb"},                                                                  "Result" : {"Status":"NULL"}}', 'numofargs' : 0, 'help' : ['[RX ID | all]', 'Shutdown the system (optionally put receivers to sleep as well).', 1]},
        'start_charging'         : {'jstr' : '{"Command":{"Type":"StartChargingDevices","Devices":["%s"],"SWITCH":"START_CHARGE"},                "Result" : {"Status":"NULL", "Devices":[]}}', 'numofargs' : 1, 'help' : ['[long id | all]', 'Changes a ready device to the charging state, making it eligible for TPS.', 1]},
        'static_charge'          : {'jstr' : '{"Command":{"Type":"StaticCharge","Beat":"%s","Hours":"%s","Minutes":"%s"},                         "Result" : {"Status":"NULL"}}', 'numofargs' : [0, 3], 'NotSet' : ['1', '3', '0'], 'help' : ['[beat][hours][minutes]', 'Start a static tune charge where beat is which beat to stop tps on hours/minutes how long to set receiver in harvest.', 0]},
        'static_power'           : {'jstr' : '{"Command":{"Type":"StaticPower"},                                                                  "Result" : {"Status":"NULL"}}', 'numofargs' : 0, 'help' : ['[]', 'Enables static transmit power.', 0]},
        'stop_charging'          : {'jstr' : '{"Command":{"Type":"StopChargingDevices","Devices":["%s"]},                                         "Result" : {"Status":"NULL"}}', 'numofargs' : 1, 'help' : ['[long id | all]', 'Changes a charging device to the ready state.', 1]},
        'sys_clk_dump'           : {'jstr' : '{"Command":{"Type":"DumpSysClock"},                                                                 "Result" : {"Status":"NULL","Registers":[]}}', 'numofargs' : 0, 'LongRead' : 50000, 'help' : ['[]', 'Dump the system clock registers.', 0]},
        'sys_clk_reg_read'       : {'jstr' : '{"Command":{"Type":"SysClkRegRead", "Address": "%s"},                                               "Result" : {"Status":"NULL", "Value":""}}', 'numofargs' : 1, 'help' : ['[Address]', 'Read the clock register address.', 1]},
        'sys_clk_reg_write'      : {'jstr' : '{"Command":{"Type":"SysClkRegWrite", "Address": "%s","Value":"%s"},                                 "Result" : {"Status":"NULL", "Value":""}}', 'numofargs' : 2, 'help' : ['[Address][Value]', 'Write Value to the clock register address.', 2]},
        'uvp_init'               : {'jstr' : '{"Command":{"Type":"UvpInit", "AMB Mask": "%s", "UVP Mask": "%s"},                                  "Result" : {"Status":"NULL"}}', 'numofargs' : [0, 2], 'NotSet' : ['0xF', '0xFFFF'], 'help' : ['[AMB Mask] [Uvp Mask]', 'Initialize the specified UVPs on the specified AMBs.', 2]},
        'uvp_mem_dump'           : {'jstr' : '{"Command":{"Type":"DumpUvpMemory","AMB":"%s","UVP":"%s"},                                          "Result" : {"Status":"NULL","Registers":[]}}', 'numofargs' : 2, 'LongRead' : 30000, 'help' : ['[AMB 0-3] [UVP 0-15]', 'Dump the registers of the specified UVP on the specified AMB.', 2]},
        'uvp_read_data'          : {'jstr' : '{"Command":{"Type":"UvpReadData", "AMB Mask": "%s","UVP Mask":"%s","Register Name":"%s"},           "Result" : {"Status":"NULL", "ReadResult":[]}}', 'numofargs' : 3, 'help' : ['[UVP Mask] [AMB Mask] [Register Name]', 'Reads Register Name data from a single UVP from a single AMB.', 3]},
        'uvp_write_data'         : {'jstr' : '{"Command":{"Type":"UvpWriteData","AMB Mask": "%s","UVP Mask":"%s","Register Name":"%s", "Data": "%s"},  "Result" : {"Status": "NULL"}}', 'numofargs' : 4, 'help' : ['[UVP Mask] [AMB Mask] [Register Name][Data]', 'Writes data to Register Name in the UVPs defined in UVP Mask on the AMBs defined in AMB Mask.', 4]},
        'versions'               : {'jstr' : '{"Command":{"Type":"GetTransmitterVersions"},                                                       "Result" : {"Status":"NULL","Code Version":0}}', 'numofargs' : 0, 'help' : ['[]', 'Get Driver  FW OS and build versions.', 0]},
}
